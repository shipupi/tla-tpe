%{
	#include <stdio.h>
	#include <stdbool.h>
	int yylex();
	void yyerror(char const *s);


	//Todo esto que son vectores se podria hacer con una suerte de lista para no tener quilombos si definen mas de n cosas pero es para que este la idea de lo q se necesita

	char * nummeric_vars_n[10];
	int nummeric_vars_v[10];
	int nummeric_idx;

	char * string_vars_n[10];
	int string_vars_v[10];
	int string_idx;

	char * planet_names[10];
	char * planet_color[10];

	int planet_xvel[10];
	int planet_yvel[10];
	int planet_xpos[10];
	int planet_ypos[10];
	int planet_mass[10];
	int planet_radius[10];

	bool planet_visibility[10];

	int planet_idx;



%}

%union {
 	float number;
 	char * str;
 	bool boolean;
}

%token SEMICOLON NEWLINE
%token IF ELSE
%token DO WHILE
%token STR_VAR INT_VAR PLANET_VAR
%token STRING_CONTENT VAR_NAME
%token DOT OPEN_CURLY CLOSE_CURLY OPEN_PAR CLOSE_PAR
%token ASSIGN QUOTATION
%token XVEL YVEL XPOS YPOS MASS VISIBILITY RADIUS COLOR NAME
%token PRINT ADD_PLANET
%token INC_OP DEC_OP ADD_OP SUB_OP MUL_OP DIV_OP
%token OR_OP AND_OP NOT_OP 
%token GT_OP GE_OP EQ_OP LE_OP LT_OP NE_OP
%token TRUE FALSE
%token NUMBER DECIMAL


%type <str> VAR_NAME print string_assign STRING_CONTENT
%type <number> NUMBER int_assign expression term factor primary DECIMAL
%type <boolean> bool_expression bool_term bool_factor bool comparison

%start entity

%%


entity	: 
		| INT_VAR VAR_NAME int_assign SEMICOLON NEWLINE entity			{/*CHECK SI EXISTE INT VAR_NAME, sino declarar y asignar int_assign*/}
		| STR_VAR VAR_NAME string_assign SEMICOLON NEWLINE entity		{/*CHECK SI EXISTE STR VAR_NAME, sino declarar y asignar string_assign*/}
		| declaration SEMICOLON NEWLINE entity							{/*SE RESUELVE ADENTRO*/}
		| control_block NEWLINE entity
		| VAR_NAME int_assign SEMICOLON NEWLINE entity					{/*CHECK SI EXISTE INT VAR_NAME y asignar int_assign, sino error*/}					
		| VAR_NAME string_assign SEMICOLON NEWLINE entity				{/*CHECK SI EXISTE STR VAR_NAME y asignar str_assign, sino error*/}
		| VAR_NAME INC_OP SEMICOLON NEWLINE entity						{/*CHECK SI EXISTE INT VAR_NAME y aumentar, sino error*/}
		| VAR_NAME DEC_OP SEMICOLON NEWLINE entity						{/*CHECK SI EXISTE INT VAR_NAME y decrementar, sino error*/}
		| assign_property SEMICOLON NEWLINE entity						
		| print SEMICOLON NEWLINE entity						
		| addplanet SEMICOLON NEWLINE entity							{/*GENERAR EL PRINT AL ARCHIVO DE OUTPUT DEL PLANETA CORRESPONDIENTE*/}
		;


print 	: PRINT OPEN_PAR VAR_NAME CLOSE_PAR  {printf("printing: %s",$3);}
		;

addplanet	: ADD_PLANET OPEN_PAR VAR_NAME CLOSE_PAR


/* PARA FACILITARNOS LA VIDA PODEMOS REMOVER int_property, string_property Y bool_property Y CONDENSAR TODAS LAS PRODUCCIONES EN ASSIGN PROPERTY, VA A QUEDAR MAS FEO PERO VA A SER MAS FACIL */
/* (Es lo que esta sin comentar abajo) */

/*
assign_property 	: VAR_NAME DOT int_property int_assign						{int_property[idx] = int_assign}
					| VAR_NAME DOT string_property string_assign				{string_property[idx] = string_assign}
					| VAR_NAME DOT bool_property bool_assign					{bool_property[idx] = bool_assign}
					;		


int_property 	: XVEL 
				| YVEL
				| XPOS
				| YPOS
				| MASS
				| RADIUS
				;


string_property		: NAME
					| COLOR
					;


bool_property	: VISIBILITY
				;
*/

assign_property 	: VAR_NAME DOT XVEL int_assign
					| VAR_NAME DOT YVEL int_assign	
					| VAR_NAME DOT XPOS int_assign
					| VAR_NAME DOT YPOS int_assign
					| VAR_NAME DOT MASS int_assign
					| VAR_NAME DOT RADIUS int_assign
					| VAR_NAME DOT NAME string_assign
					| VAR_NAME DOT COLOR string_assign
					| VAR_NAME DOT VISIBILITY bool_assign
					;



bool_assign		: ASSIGN bool_expression
				;


declaration 	: STR_VAR VAR_NAME			{/*CHECK SI EXISTE STR VAR_NAME, sino declarar*/}
				| INT_VAR VAR_NAME			{/*CHECK SI EXISTE INT VAR_NAME, sino declarar*/}
				| PLANET_VAR VAR_NAME		{/*CHECK SI EXISTE Planet VAR_NAME, sino declarar*/}
				;





int_assign	: ASSIGN expression  	{$$ = $2;}
			;


expression 	: term 						{$$ = $1;}
			| expression ADD_OP term 	{$$ = $1 + $3;}
    		| expression SUB_OP term 	{$$ = $1 - $3;}
    		;


term 	: factor 				{$$ = $1;}
    	| term MUL_OP factor 	{$$ = $1 * $3;}
    	| term DIV_OP factor 	{$$ = $1 / $3;}
    	;


factor 	: primary 			{$$ = $1;}
    	| SUB_OP factor 	{$$ = -$2;}
    	| ADD_OP factor 	{$$ = $2;}
    	;


primary		: VAR_NAME							{/*RECUPERAR VALOR DEL ARRAY*/}
			| NUMBER 							{$$ = $1;}
			| DECIMAL							{$$ = $1;}
    		| OPEN_PAR expression CLOSE_PAR 	{$$ = $2;}
    		;


string_assign	: ASSIGN QUOTATION STRING_CONTENT QUOTATION		{$$ = $3;}
				;


control_block 	: conditional
				| while
				;


conditional 	: IF OPEN_PAR bool_expression CLOSE_PAR OPEN_CURLY entity CLOSE_CURLY 
				| IF OPEN_PAR bool_expression CLOSE_PAR OPEN_CURLY entity CLOSE_CURLY ELSE OPEN_CURLY entity CLOSE_CURLY
				;


while 	: WHILE OPEN_PAR bool_expression CLOSE_PAR OPEN_CURLY entity CLOSE_CURLY 
		| DO OPEN_CURLY entity CLOSE_CURLY WHILE OPEN_PAR bool_expression CLOSE_PAR SEMICOLON
		;


bool_expression 	: bool_term								{$$ = $1;}
					| bool_expression OR_OP bool_term		{$$ = $1 || $3;}
					;


bool_term	: bool_factor									{$$ = $1;}
			| bool_term AND_OP bool_factor					{$$ = $1 && $3;}
			;


bool_factor		: OPEN_PAR bool_expression CLOSE_PAR 		{$$ = $2;}
				| NOT_OP bool_factor 						{$$ = !$2;}
				| bool 										{$$ = $1;}
				;


bool 	: TRUE 												{$$ = true;}
		| FALSE 											{$$ = false;}
		| comparison										{$$ = $1;}
		;


comparison 		: expression GT_OP expression 	{$$ = $1 > $3;} 
				| expression GE_OP expression 	{$$ = $1>= $3;} 
				| expression EQ_OP expression 	{$$ = $1 == $3;}
				| expression LE_OP expression 	{$$ = $1 < $3;}
				| expression LT_OP expression 	{$$ = $1 <= $3;}
				| expression NE_OP expression 	{$$ = $1 != $3;}
				;


%%

void yyerror(char const *s)
{
    printf("yyerror  %s\n",s);
    return ;
}

int main()
{
  yyparse();
  return 1;
}
    